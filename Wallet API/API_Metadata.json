{
    "Introduction": {
        "description": "The OrbiPay Wallet API is a type of electronic P2P payment service which provide a fast and conveniet way through which individuals can send and receive money via their mobile devices. There is no need to know the bank information of a person to send money to them. All you need to know is their email address or phone number."
    },
    "Topics": [
        {
            "title": "Authentication",
            "description": "###Overview\r\nThe HTTP Authorization request header is used to provide authentication information. This header looks like the following.\r\n\r\n`Authorization : OPW1-HMAC-SHA256 Credential=...,Signature=...`\r\n\r\n\r\nThe constituents of the autorization header are explained in the table below.\r\n\r\n|  Item | Description |\r\n| ------------ | ------------ |\r\n|OPW1-HMAC-SHA256  | The algorithm that is used to calculate the signature.  |\r\n| Credential  | The partner_id.  |\r\n| Signature  | The Base 64 encoded value of the signature bytes. Calculating the signature bytes is explained below.  |\r\n\r\n###Signature Calculation\r\nSignature is calculated as follows.\r\n\r\n`Base64(HMAC-SHA256(secret,input))`\r\n\r\n The calculation is explained in detail below.\r\n\r\n\r\n|  Item | Description |\r\n| ------------ | ------------ |\r\n| Base64()  | The encoding of the signature bytes.  |\r\n| HMAC-SHA256()  | The cryptographic function that computes the HMAC by using the SHA256 algorithm with the partner secret provided.  |\r\n| secret  | The secret key specific to the partner that is shared with the partner during onboarding.  |\r\n| input  | The string value of the canonicalized transform of request data that includes the HTTP method,URL,headers, query parameters and body. The details of computing the input is explained below. |\r\n\r\nThe string *input* is computed as follows.\r\n\r\n`input = method():path():queryString():headers():payload()`\r\n\r\nEach of the substrings is explained below.\r\n\r\n|  Item | Description |\r\n| ------------ | ------------ |\r\n| method()  | The HTTP method for the given request and evaluates to one of **GET**, **PUT**, **POST** or **DELETE**.  |\r\n| path()  | The the absolute path component of the URI—everything starting with the **\"/\"** that follows the domain name and up to the end of the string or to the question mark character (**\"?\"**) if the given URL has query string parameters.  |\r\n| queryString()  | A string in the format param1=value1&param2=value2&…, where the query parameters are sorted in alphabetical order of the parameter names. Only parameters with non-null values should be included. Both the parameter names and their values should be trimmed for leading and trailing whitespaces, converted to lowercase and should be in their normal pre-encoded format. If there are no query parameters at all, the queryString() should evaluate to an empty string (“”).  |\r\n| headers()  | A string  in the format _header1=value1&header2=value2&.......&headerN=valueN_. The headers are to be sorted alphabetically. Only the headers listed by the application and those that are non-empty are to be included. Both the header names and their values must be trimmed for leading and trailing white-space, converted to lowercase and in their normal pre-encoded format |\r\n| payload()  | The raw HTTP body |",
            "sample_type": "md2html"
        },
        {
            "title": "Communication",
            "description": "OrbiPay Wallet utilizes secure public and private key communication using the RSA-2048 algorithm for both Partner and Server SDKs. These unique public and private keys are shared with our partner partners, enabling them to securely make Wallet API requests and encrypt the sensitive information at field / request parameter level.\r\nOrbiPay Wallet provides a browser SDK to integrate partner payment pages, as well as a partner side server library to confirm the payments. Requests from both SDKs must pass through key pair validation, and appropriate responses are sent upon validation and encryption.",
            "sample_type": "md2html"
        },
        {
            "title": "Resources",
            "description": "A Customer is always associated with a Funding Source. A Charge is always made by Customer using a Funding Account. Each of these resources is labeled with its own id in OrbiPay Wallet.<br/><br/>**Customer**<br/>A customer is an individual or business entity transacting with the Wallet application. This resource used to create and manage customer records within Orbipay Wallet system.<br/><br/>**Funding Account**<br/>The credit card, debit card, or bank account being used to make a payment. The resource provide managing the funding account information within Orbipay Wallet system.<br/><br/>**Payment**<br/>The process through which funds from a Funding Account are applied towards a balance on a Customer’s billing account.<br/><br/>",
            "sample_type": "md2html"
        },
        {
            "title": "Errors",
            "description": "OrbiPay Wallet uses standard HTTP response codes to return the status of an API call along with additional information.\r\nAn HTTP response code of 2xx indicates success. In this case, additional information pertaining to the request is sent back in the header parameters. An HTTP response code of 4xx or 5xx indicates a processing error. In this case, OrbiPay Wallet also returns a list of errors in the response body in JSON format. Each error has a code, message, and specifies the field to which the error is related, as applicable.",
            "sample_type": "md2html",
            "sample": "**HTTP Response Codes**\r\n|Code|Reason|\r\n|---|---|\r\n|200 - OK|Successfully processed the request|\r\n|400 - Bad Request|The request was rejected, most likely due to invalid parameters|\r\n|401, 403 - Unauthorized, Forbidden|Unauthorized or forbidden request|\r\n|404 - Not Found|The resource does not exist|\r\n|500 - Internal Server Error|Something went wrong with Orbipay and the request could not be processed.||\r\n\r\n **Orbipay Wallet Error codes**\r\n|code|message|\r\n|---|---|\r\n|error_field|The error returned if a mandatory field is missing value or if the value is invalid. This is accompanied by the field that caused the error.|\r\n|error_payment_rejected |The error returned if a payment cannot be processed as it violates business rules.|\r\n|error_invalid_dda|The request can not be completed with the given bank account details. |\r\n|error_invalid_card |The request can not be completed with the given card account details|\r\n|error_card_declined|The request can not be completed as the given card is declined by the issuer|\r\n|error_card_auth|The request can not be completed as the card details providedcan not be validated |\r\n|error_insufficient_balance |The request can not be completed with the given funding source type. Choose a different type of funding source and try again|\r\n|error_payment_disallowed |The request can not be processed with the given payment date.|\r\n|error_req_param|TNo record found with given request parameters.|\r\n|error_tech_diff|The request can not be processed due to issues with card processor set-up, communication issues with card issuer or other technical issues at Orbipay Wallet.|"
        },
        {
            "title": "Meta Data",
            "description": "Metadata/Custom fields are useful for storing additional structured information in an object. For example, a custom field could be used to capture additional order details or some other associated information against the charge. This information is not stored or used for payment processing.",
            "sample_type": "md2html"
        },
        {
            "title": "Pagination",
            "description": "Pagination allows partners to control the number of results returned from the Wallet API by setting the initial_records parameter. To view more pages, designate the “to” and “from” record numbers along with the query id (a unique id returned for every result set for a given search criteria).",
            "sample_type": "md2html"
        }
    ],
    "API_Objects": [
        {
            "tag": "Customer",
            "name": "Customer Object",
            "reference": "customer",
            "description": "Based on the merchant’s preference, a customer can be uniquely identified by the customer_id or email attributes on Customer Object.\r\nThis section outlines the APIs required to exchange and manage customer information, such as create customer."
        }
    ],
    "Code_Samples": [],
    "Object_Models": []
}