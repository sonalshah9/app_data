{
    "project": "Orbipay Checkout",
    "Topics": [
        {
            "title": "Overview",
            "content": "<p>Orbipay Checkout© is a payment platform that merchants can use in order to accept payments from their customers who place orders on their websites. The payments can be accepted on a one-time basis from credit cards, debit cards or bank accounts.</p>\r\n"
        },
        {
            "title": "Design Documents",
            "content": "<p>The main objective is to present one of the integration approach where the customer stays on merchant website during the entire purchase process (i.e., does not get redirected to Orbipay’s site etc). All the work of payment capture process is done by Orbipay Checkout© behind-the-scenes. This approach to enable a merchant to accept payments is achieved through <strong>tokenization</strong>.<img alt=\"\" src=\"https://bapps.alacriti.com/confluence/download/attachments/44140803/Checkout_E2E_Design.png?version=1&modificationDate=1493322400000&api=v2\" style=\"height:471px; width:900px\" /></p>\r\n",
            "subTopics": [
                {
                    "title": "Client On-boarding",
                    "content": "<p>Client On-boarding involves the following</p>\r\n\r\n<p>• Registering with the Orbipay© platform</p>\r\n\r\n<p>• Generating security keys (<strong>Public Key & Secret Key</strong> – for both Test and Live modes)</p>\r\n\r\n<p>• Registering with Checkout application</p>\r\n\r\n<p>• Download the Platform specific <strong>Server</strong> and <strong>Client SDKs</strong></p>\r\n"
                },
                {
                    "title": "Client Integration",
                    "content": "<p>Checkout provides browser/client SDK (front-end integration) and server SDK (back-end integration) for integration to Checkout. We support different ways to integrate, they are simple and custom. </p>\r\n\r\n<p>For securely collecting payment information without posting the customer’s payment information to client's server we use tokenization approach.</p>\r\n\r\n<p>Tokenization:</p>\r\n\r\n<p>With Checkout, sensitive customer’s payment information does not hit client's server, minimizing client's PCI compliance burden. Just enabling <strong>HTTPS</strong> on client's checkout/payment page is enough, and Checkout takes care of everything from there. </p>\r\n\r\n<p>How tokenization works with SSL encryption and digital signature:</p>\r\n\r\n<ol>\r\n\t<li>The customer arrives at payment page that includes the Checkout code, loaded over HTTPS.</li>\r\n\t<li>The customer clicks the payment button (e.g., Pay), completes the payment form, and clicks Pay in the Checkout window.</li>\r\n\t<li>Checkout sends the payment details directly to Checkout from the customer's browser, assuming the details pass basic validation.</li>\r\n\t<li>Checkout returns a encrypted(with client's public key) token and digital signature for the token generated with Checkout private key  to the payment page, or an error message if the funding account validation fails.</li>\r\n\t<li>Browser SDK posts the token and digiSign to client's server.</li>\r\n\t<li>Client's server decrypts the token with their private key and verifies the digiSign with Checkout public key.</li>\r\n\t<li>Again they encrypt the token with Checkout public key and  generate digiSign for the token with their private key.</li>\r\n\t<li> Using Server SDK encrypted token and digiSign with other details are posted to Checkout for confirm payment.</li>\r\n\t<li>Checkout server decrypts the token with Checkout private key and verifies the digiSign with client's public key.</li>\r\n\t<li>Checkout responds back with success or failure and accordingly Client shows message to their customer.</li>\r\n</ol>\r\n\r\n<p><strong>Note</strong>: Steps 6,7 and 8 are taken care in Server SDK. Client does not need to worry about all these encryption/decryption and digiSign generation/verification. They just have to provide the same token and digiSign they receive.<br />\r\n </p>\r\n\r\n<p>Checkout supports three different ways of integration : </p>\r\n\r\n<ul>\r\n\t<li><ins><strong>Simple Integration</strong><strong>:</strong></ins></li>\r\n</ul>\r\n\r\n<ol>\r\n\t<li>\r\n\t<ol>\r\n\t\t<li>\r\n\t\t<p><strong>Iframe</strong></p>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<p><strong>Simple Html Div Tag Integration</strong></p>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n</ol>\r\n\r\n<ul>\r\n\t<li><ins><strong>Custom Integration</strong><strong>:</strong></ins></li>\r\n</ul>\r\n\r\n<ol>\r\n\t<li>\r\n\t<ol>\r\n\t\t<li><strong>Embedded Payment Form / Custom Integration</strong></li>\r\n\t</ol>\r\n\t</li>\r\n</ol>\r\n\r\n<p>Website Integration involves the following development (By Client IT):</p>\r\n\r\n<ul>\r\n\t<li><em><strong>Front-End development</strong></em> for handling payment capture using <strong>Browser /</strong> <strong>ClientSDK</strong></li>\r\n\t<li><em><strong>Back-End development</strong></em> for confirming the payment using <strong>ServerSDK</strong></li>\r\n</ul>\r\n\r\n<p> </p>\r\n\r\n<p><ins><strong><em><strong>Front-End UI development:</strong></em></strong></ins></p>\r\n\r\n<p> </p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong><strong>Simple <strong>Integration</strong></strong></strong>:</p>\r\n\r\n\t<p>Simple Integration is the easiest way to integrate Checkout. In this approach payment form opens as a pop-up (Overlay) on the client's checkout/payment page. And a minimal java script inclusion on the payment page does the work.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>\r\n\t<ul>\r\n\t\t<li><strong>Step 1: </strong> Add a button/Input with id = “checkout-button”.<br />\r\n\t\t<br />\r\n\t\t<button id = \"checkout-button\">Pay</button><br />\r\n\t\t </li>\r\n\t\t<li><strong>Step 2:  </strong>Add the following script.\r\n\t\t<p><code><script id = \"checkout-script\"<br />\r\n\t\t     src = \"<a href=\"https://www.orbipay.com/js/checkoutofsc.js\">https://www.orbipay.com/js/checkoutofsc.js</a>\"<br />\r\n\t\t     data-key = \"cli_avmg585852kw555p\"\"<br />\r\n\t\t     data-clienturl = \"/onlineshopping/post-token\" <br />\r\n\t\t     data-amount = \"56\"<br />\r\n\t\t     data-iframe = \"true\"<br />\r\n\t\t     data-chargerefno = \"ord_82bad47fe43e7b8586ff672e8e6\"<br />\r\n\t\t     data-customer_id = \"cust_3e7b8586ff672e8\" ><br />\r\n\t\t</script></code></p>\r\n\r\n\t\t<p>Where,</p>\r\n\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t<p><strong><strong>data-key</strong> </strong>is a unique identifier for a partner in Checkout.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong><strong>data-clienturl</strong></strong> is the URL to which token will be posted. The URL to be supplied by Merchant.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>data-amount</strong> is amount to be charged.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>data-iframe</strong> is to choose between iframe or div approach in simple integration, if 'true' then iframe else div.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>data-chargerefno</strong> is unique order no. for a transaction.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>data-customer_id</strong> is unique customer id maintained by merchant (optional).</p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p> </p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong><strong>Custom <strong>Integration</strong></strong></strong>:</p>\r\n\r\n\t<p>Custom integration allows to have complete control over the look and feel of your payment form and include the Checkout provided attributes for every input in the form. Your form can be customized however you need and the submitted funding source information is tokenized directly with Checkout. In this approach little more development is required on the payment page to give you more control.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>\r\n\t<ul>\r\n\t\t<li>\r\n\t\t<p><strong>Step 1: </strong> Design payment form (However you design the form, just the exact value for the <strong>data-checkout</strong> attribute should be provided for each element).</p>\r\n\r\n\t\t<p><strong>Bank Form</strong><strong>:</strong></p>\r\n\r\n\t\t<p><code><form id=\"pmt-form-bank\" action=\"/cameron-insurance/post-token\" method=\"POST\"><br />\r\n\t\t     <label>Name of Account Holder *</label><input data-checkout=\"nameonaccount\" type=\"text\"><br />\r\n\t\t     <label>Email *</label><input data-checkout=\"email-bank\" type=\"text\"><br />\r\n\t\t     <label>Account Number *</label><input data-checkout=\"acctno\" type=\"text\"><br />\r\n\t\t     <label>Confirm Account Number *</label><input data-checkout=\"confirmacctno\" type=\"text\"><br />\r\n\t\t     <label>Account Type *</label><br />\r\n\t\t     <select data-checkout=\"acctType\"><br />\r\n\t\t          <option value=\"checking\">Checking</option><br />\r\n\t\t          <option value=\"savings\">Savings</option><br />\r\n\t\t     </select><br />\r\n\t\t     <label>Routing Number *</label><input data-checkout=\"routingNumber\" type=\"text\"><br />\r\n\t\t     <label>Address Line1 </label><input data-checkout=\"address-line1-bank\" type=\"text\"><br />\r\n\t\t     <label>Address Line2 </label><input data-checkout=\"address-line2-bank\" type=\"text\"><br />\r\n\t\t     <label>State </label><br />\r\n\t\t     <select data-checkout=\"state-bank\"><br />\r\n\t\t          <option value=\"\">Select State</option><br />\r\n\t\t          <option value=\"AL\">Alabama</option><br />\r\n\t\t          <option value=\"AK\">Alaska</option><br />\r\n\t\t                         .......................<br />\r\n\t\t     </select><br />\r\n\t\t     <label>City </label><input data-checkout=\"city-bank\"><br />\r\n\t\t     <label>Country </label><br />\r\n\t\t     <select id=\"country-bank\" class=\"form-control \" data-checkout=\"country-bank\"><br />\r\n\t\t          <option value=\"USA\">USA</option><br />\r\n\t\t     </select><br />\r\n\t\t     <label>Zip </label><input data-checkout=\"zip1-bank\" type=\"text\"><input data-checkout=\"zip2-bank\" type=\"text\"><br />\r\n\t\t     <label>Phone Number </label><input data-checkout=\"phone-bank\" type=\"tel\"><br />\r\n\t\t     <input type=\"hidden\" data-checkout=\"order-no-bank\" value=\"\" /><br />\r\n\t\t     <input type=\"submit\" value=\"Pay\"/><br />\r\n\t\t </form></code></p>\r\n\r\n\t\t<p><strong>Card Form</strong><strong>:</strong></p>\r\n\r\n\t\t<p><code><form id=\"pmt-form-card\" action=\"/cameron-insurance/post-token\" method=\"POST\"><br />\r\n\t\t     <label>Name On Card *</label><input data-checkout=\"name-on-card\" type=\"text\"><br />\r\n\t\t     <label>Card Number *</label><input data-checkout=\"card-number\" type=\"text\"><br />\r\n\t\t     <label>Expiry Date *</label><input data-checkout=\"exp-card\" type=\"text\"><br />\r\n\t\t     <label>CVV *</label><input data-checkout=\"cvv\" type=\"text\"><br />\r\n\t\t     <label>Email *</label><input data-checkout=\"email-card\" type=\"text\"><br />\r\n\t\t     <label>Address Line1 </label><input data-checkout=\"address-line1-card\" type=\"text\"><br />\r\n\t\t     <label>Address Line2 </label><input data-checkout=\"address-line2-card\" type=\"text\"><br />\r\n\t\t     <label>State </label><br />\r\n\t\t     <select data-checkout=\"state-card\"><br />\r\n\t\t          <option value=\"\">Select State</option><br />\r\n\t\t          <option value=\"AL\">Alabama</option><br />\r\n\t\t          <option value=\"AK\">Alaska</option><br />\r\n\t\t                         .......................<br />\r\n\t\t     </select><br />\r\n\t\t     <label>City </label><input data-checkout=\"city-card\"><br />\r\n\t\t     <label>Country </label><br />\r\n\t\t     <select id=\"country-bank\" class=\"form-control \" data-checkout=\"country-card\"><br />\r\n\t\t          <option value=\"USA\">USA</option><br />\r\n\t\t     </select><br />\r\n\t\t     <label>Zip </label><input data-checkout=\"zip1-card\" type=\"text\"><input data-checkout=\"zip2-card\" type=\"text\"><br />\r\n\t\t     <label>Phone Number </label><input data-checkout=\"phone-card\" type=\"tel\"><br />\r\n\t\t     <input type=\"hidden\" data-checkout=\"order-no-card\" value=\"\" /><br />\r\n\t\t     <input type=\"submit\" value=\"Pay\"/><br />\r\n\t\t </form></code></p>\r\n\r\n\t\t<p><ins>Note: Mandatory fields has '*' in the label name.</ins></p>\r\n\r\n\t\t<p><ins>Validation helpers:</ins></p>\r\n\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t<p><code>OrbipayCheckout.bank.validateRoutingNumber(routingNo);</code></p>\r\n\t\t\t</li>\r\n\t\t\t<li><code>OrbipayCheckout.bank.validateAccountNumber(acctNo);</code></li>\r\n\t\t\t<li><code>OrbipayCheckout.card.validateCardNumber(cardNo);</code></li>\r\n\t\t\t<li><code>OrbipayCheckout.card.validateExpiry(exp);</code></li>\r\n\t\t\t<li><code>OrbipayCheckout.card.validateCVC(cvc);</code></li>\r\n\t\t\t<li><code>OrbipayCheckout.card.cardType(cardNo);</code><br />\r\n\t\t\t </li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<p><strong>Step 2: </strong> Include the following script.</p>\r\n\r\n\t\t<p><code> <script id = \"checkout-script\" src=\"<a href=\"https://www.orbipay.com/js/checkoutofsc.js\">https://www.orbipay.com/js/checkoutofsc.js</a>\"</</code>script></p>\r\n\r\n\t\t<p> </p>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<p><strong>Step 3: </strong> Provide ClientId, ExtCustomerId and Amount.</p>\r\n\r\n\t\t<p><code>OrbipayCheckout.setClientId(\"cli_avmg585852kw555p\");<br />\r\n\t\tOrbipayCheckout.setExtCustomerId(\"cust_3e7b8586ff672e8\"); // optional<br />\r\n\t\tOrbipayCheckout.setAmount(\"56\");</code></p>\r\n\r\n\t\t<p> </p>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<p><strong>Step 4: </strong> Collect customer’s payment information.</p>\r\n\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t<p>Bank Payment:</p>\r\n\r\n\t\t\t<p><code>$formBank.submit(function(event) {<br />\r\n\t\t\t     try {<br />\r\n\t\t\t        // Disable the submit button to prevent repeated clicks:<br />\r\n\t\t\t        $formBank.find('.submit').prop('disabled', true);<br />\r\n\t\t\t        // Request a token from OrbipayCheckout:<br />\r\n\t\t\t        OrbipayCheckout.bank.createToken($formBank, checkoutResponseHandler);<br />\r\n\t\t\t        // Prevent the form from being submitted:<br />\r\n\t\t\t        return false;<br />\r\n\t\t\t     }catch(err){<br />\r\n\t\t\t        console.log(err);<br />\r\n\t\t\t        return false;   // Prevent the form from being submitted:<br />\r\n\t\t\t     } <br />\r\n\t\t\t});</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p>Card Payment:</p>\r\n\r\n\t\t\t<p><code>$formCard.submit(function(event) {<br />\r\n\t\t\t     try {<br />\r\n\t\t\t        // Disable the submit button to prevent repeated clicks:<br />\r\n\t\t\t        $formCard.find('.submit').prop('disabled', true);<br />\r\n\t\t\t        // Request a token from OrbipayCheckout:<br />\r\n\t\t\t        OrbipayCheckout.card.createToken($formCard, checkoutResponseHandler);<br />\r\n\t\t\t        // Prevent the form from being submitted:<br />\r\n\t\t\t        return false;<br />\r\n\t\t\t     }catch(err){<br />\r\n\t\t\t        console.log(err);<br />\r\n\t\t\t        return false;   // Prevent the form from being submitted:<br />\r\n\t\t\t     } <br />\r\n\t\t\t});</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li><strong>Step 5: </strong> Handle the response and post the token to merchant server with the following additional form parameters.\r\n\t\t<p><code>function checkoutResponseHandler(status, response) {<br />\r\n\t\t     // Grab the form<br />\r\n\t\t     var $formBank = $('#pmt-form-bank');<br />\r\n\t\t     var $formCard = $('#pmt-form-card');</code></p>\r\n\t\t<code>  </code>\r\n\r\n\t\t<p><code>     if (status === false) { // Problem!<br />\r\n\t\t          // Show the errors on the form<br />\r\n\t\t          $('#payment-errors').text(response.error);<br />\r\n\t\t          $('#payment-errors').prop('hidden', false);<br />\r\n\t\t          $formBank.find('.submit').prop('disabled', false); // Re-enable submission<br />\r\n\t\t          $formCard.find('.submit').prop('disabled', false); // Re-enable submission<br />\r\n\t\t     } else { // Token was created!<br />\r\n\t\t          // Get the token ID<br />\r\n\t\t          $('#payment-errors').prop('hidden', true);<br />\r\n\t\t          if(response.chargeType === \"bank\"){<br />\r\n\t\t               // Insert the token ID into the form so it gets submitted to the server<br />\r\n\t\t               $formBank.append($('<input type=\"hidden\" name=\"token\">').val(response.token));<br />\r\n\t\t               $formBank.append($('<input type=\"hidden\" name=\"digiSign\">').val(response.digiSign));<br />\r\n\t\t               $formBank.append($('<input type=\"hidden\" name=\"ext_cust_id\">').val(response.ext_cust_id));<br />\r\n\t\t               // Submit the form<br />\r\n\t\t               $formBank.get(0).submit();<br />\r\n\t\t          }else if(response.chargeType === \"card\"){<br />\r\n\t\t               // Insert the token ID into the form so it gets submitted to the server<br />\r\n\t\t               $formCard.append($('<input type=\"hidden\" name=\"token\">').val(response.token));<br />\r\n\t\t               $formCard.append($('<input type=\"hidden\" name=\"digiSign\">').val(response.digiSign));<br />\r\n\t\t               $formCard.append($('<input type=\"hidden\" name=\"ext_cust_id\">').val(response.ext_cust_id));<br />\r\n\t\t               // Submit the form<br />\r\n\t\t               $formCard.get(0).submit();<br />\r\n\t\t          }<br />\r\n\t\t     }<br />\r\n\t\t};</code></p>\r\n\r\n\t\t<p>Where,</p>\r\n\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>token</strong> - Checkout generated token for the confirmation of payment. It can be used only once and comes with a expiry time.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>digiSign</strong> - SSL digital signature for token generated with checkout private key.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>ext_cust_id</strong> - Customer unique id maintained by merchant(optional).</p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\r\n\t<p> </p>\r\n\t</li>\r\n</ul>\r\n\r\n<p><ins><strong><em><strong>Back-End development:</strong></em></strong></ins></p>\r\n\r\n<p>For processing the payment there is a minimal amount of programming required on the server side as well after adding server SDK as dependency. When the Order details along with the payment Token gets submitted to the Merchant Server. Checkout Server SDK takes care of following things:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Decrypts the token and verifies the digital signature.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Again encrypts the token with the checkout public key and signs with merchant private key.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Submits the encrypted token and generated digital signature to checkout server for confirm charge request.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Handles the response.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<ul>\r\n\t<li><strong>Confirm Charge Request:</strong>\r\n\r\n\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\tPaymentRequest paymentRequest = new PaymentRequest();<br />\r\n\t     paymentRequest.setAmount(amount);<br />\r\n\t     paymentRequest.setChargeTraceRefNo(chargeTraceRefNo);<br />\r\n\t     paymentRequest.setTokenId(token);<br />\r\n\t     paymentRequest.setDigiSign(digiSign);<br />\r\n\tCheckoutResponse<Payment> checkoutResponse = CheckoutPayment.confirmCharge(paymentRequest);</code></p>\r\n\t</li>\r\n</ul>\r\n\r\n<p> </p>\r\n\r\n<ul>\r\n\t<li><strong>Other Services we support using server SDK:</strong>\r\n\r\n\t<ul>\r\n\t\t<li><strong> </strong><strong>Customer</strong>\r\n\r\n\t\t<ul>\r\n\t\t\t<li><strong>Create Customer Request:</strong>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tCustomerRequest customerRequest = new CustomerRequest();<br />\r\n\t\t\t     customerRequest.setSourceType(\"token\");<br />\r\n\t\t\t     Customer customer = new Customer();<br />\r\n\t\t\t          customer.setCustomerId(\"user_examplecfhd88609\");<br />\r\n\t\t\t          customer.setEmail(\"willsmith@<a href=\"http://example.com/\">example.com</a>\");<br />\r\n\t\t\t          customer.setFirstName(\"Will\");<br />\r\n\t\t\t     customerRequest.setCustomer(customer);<br />\r\n\t\t\t     FundingAccount fundingAccount = new FundingAccount();<br />\r\n\t\t\t          fundingAccount.setAccountHolderName(\"Will Smith\");<br />\r\n\t\t\t          fundingAccount.setAccountNumber(\"4124939999999990\");<br />\r\n\t\t\t          fundingAccount.setAccountType(\"card\");<br />\r\n\t\t\t          fundingAccount.setAccountSubtype(\"visa\");<br />\r\n\t\t\t          fundingAccount.setCardCvvNumber(\"123\");<br />\r\n\t\t\t          fundingAccount.setCurrencyCode3d(\"USD\");<br />\r\n\t\t\t          fundingAccount.setExpiryDate(\"11/29\");<br />\r\n\t\t\t     customerRequest.setFundingAccount(fundingAccount);<br />\r\n\t\t\tCheckoutResponse<CreateCustomerResponse> checkoutResponse = CheckoutCustomer.create(customerRequest);</code></p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li><strong>Funding Account</strong>\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>Retrieve Customer’s Funding Accounts Request:</strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tRetrieveCustomerFundingAccountsRequest fundingAccountsRequest = new RetrieveCustomerFundingAccountsRequest();<br />\r\n\t\t\t     fundingAccountsRequest.setCustomerId(\"sai.123@<a href=\"http://gmail.com/\">gmail.com</a>\");<br />\r\n\t\t\tCheckoutResponse<RetrieveCustomerFundingAccountsResponse> checkoutResponse = CheckoutFundingAccount.retrieveCustomerFundingAccounts(fundingAccountsRequest);</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>Get Customer’s Funding Accounts Page<strong> Request:</strong></strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tGetFundingAccountsRequest fundingAccountsRequest = new GetFundingAccountsRequest();<br />\r\n\t\t\t     fundingAccountsRequest.setCustomerId(\"user_examplecfhd88609\");<br />\r\n\t\t\t     fundingAccountsRequest.setQueryId(\"10\");<br />\r\n\t\t\t     fundingAccountsRequest.setFrom(\"11\");<br />\r\n\t\t\t     fundingAccountsRequest.setTo(\"15\");<br />\r\n\t\t\tCheckoutResponse<RetrieveCustomerFundingAccountsResponse> checkoutResponse = CheckoutFundingAccount.getCustomerFundingAccounts(fundingAccountsRequest);</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong><strong><strong>Retrieve Funding Account Details<strong> Request:</strong></strong></strong></strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tRetrieveFundingAccountsDetailsRequest fundingSourceDetailsRequest = new RetrieveFundingAccountsDetailsRequest();<br />\r\n\t\t\t     fundingSourceDetailsRequest.setFundingAccountId(fundingSourceId);<br />\r\n\t\t\tCheckoutResponse<CustomerFundingAccountConsolidatedResponseRetrieve> checkoutResponse = CheckoutFundingAccount.retrieveFundingAccountDetails(fundingSourceDetailsRequest);</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>Delete Funding Account<strong> Request:</strong></strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tDeleteFundingAccountRequest deleteFundingAccountRequest = new DeleteFundingAccountRequest();<br />\r\n\t\t\t     deleteFundingAccountRequest.setFundingAccountId(fundingAccountId);<br />\r\n\t\t\tCheckoutResponse<DeleteFundingAccountResponse> checkoutResponse = CheckoutFundingAccount.deleteFundingAccount(deleteFundingAccountRequest);</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li><strong>Payment</strong>\r\n\t\t<ul>\r\n\t\t\t<li><strong>Retrieve Customer’s Payments Request:</strong>\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tRetrieveCustomerPaymentsRequest customerPaymentsRequest = new RetrieveCustomerPaymentsRequest();<br />\r\n\t\t\t     customerPaymentsRequest.setCustomerId(\"user_3746ythcfhd88609\");<br />\r\n\t\t\t     customerPaymentsRequest.setInitialRecords(\"10\");<br />\r\n\t\t\t     RetrievePaymentsRequest paymentsFilter = new RetrievePaymentsRequest();<br />\r\n\t\t\t          paymentsFilter.setConfirmationId(\"GCC29QR24N\");<br />\r\n\t\t\t          paymentsFilter.setPaymentStatus(\"scheduled\");<br />\r\n\t\t\t          paymentsFilter.setFromDate(\"13/02/2017\");<br />\r\n\t\t\t          paymentsFilter.setToDate(\"20/02/2017\");<br />\r\n\t\t\t     customerPaymentsRequest.setPaymentsRequest(paymentsFilter);<br />\r\n\t\t\tCheckoutResponse<RetrieveCustomerPaymentsResponse> checkoutResponse = CheckoutPayment.retrieveCustomerPayments(customerPaymentsRequest);</code></p>\r\n\r\n\t\t\t<p><br />\r\n\t\t\t </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>Get Customer’s Payments Page Request:</strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tGetCustomerPaymentsRequest paymentsPageRequest = new GetCustomerPaymentsRequest();<br />\r\n\t\t\t     paymentsPageRequest.setCustomerId(\"user_examplecfhd88609\");<br />\r\n\t\t\t     paymentsPageRequest.setQueryId(\"10\");<br />\r\n\t\t\t     paymentsPageRequest.setFrom(\"11\");<br />\r\n\t\t\t     paymentsPageRequest.setTo(\"15\");<br />\r\n\t\t\tCheckoutResponse<RetrieveCustomerPaymentsResponse> checkoutResponse = CheckoutPayment.getCustomerPayments(paymentsPageRequest);</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>Retrieve Payment Details Request:</strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tRetrievePaymentDetailsRequest paymentDetailsRequest = new RetrievePaymentDetailsRequest();<br />\r\n\t\t\t     paymentDetailsRequest.setPaymentId(paymentId);<br />\r\n\t\t\tCheckoutResponse<CustomerPaymentConsolidatedResponseRetrieve> checkoutResponse = CheckoutPayment.retrievePaymentDetails(paymentDetailsRequest);</code></p>\r\n\r\n\t\t\t<p> </p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p><strong>Cancel Payment Request:</strong></p>\r\n\r\n\t\t\t<p><code>Checkout.init(CHECKOUT_CLIENT_ID, CLIENT_SIG_KEY);<br />\r\n\t\t\tCancelPaymentRequest cancelPaymentRequest = new CancelPaymentRequest();<br />\r\n\t\t\t     cancelPaymentRequest.setPaymentId(paymentId);<br />\r\n\t\t\tCheckoutResponse<CancelPaymentResponse> checkoutResponse = CheckoutPayment.cancelPayment(cancelPaymentRequest);</code></p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n"
                }
            ]
        }
    ],
    "apiReference": "https://www.google.co.in/"
}