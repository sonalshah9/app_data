{
    "project": "Orbipay Checkout",
    "Topics": [
        {
            "title": "Overview",
            "content": "<p>Orbipay Checkout© is a payment platform that merchants can use in order to accept payments from their customers who place orders on their websites. The payments can be accepted on a one-time basis from credit cards, debit cards or bank accounts.</p>\r\n"
        },
        {
            "title": "Design Documents",
            "content": "<p>The main objective is to present one of the integration approach where the customer stays on merchant website during the entire purchase process (i.e., does not get redirected to Orbipay’s site etc). All the work of payment capture process is done by Orbipay Checkout© behind-the-scenes. This approach to enable a merchant to accept payments is achieved through <strong>tokenization</strong>.<img alt=\"\" src=\"https://bapps.alacriti.com/confluence/download/attachments/44140803/Checkout_E2E_Design.png?version=1&modificationDate=1493322400000&api=v2\" style=\"height:471px; width:900px\" /></p>\r\n",
            "subTopics": [
                {
                    "title": "Client On-boarding",
                    "content": "<p>Client On-boarding involves the following</p>\r\n\r\n<p>• Registering with the Orbipay© platform</p>\r\n\r\n<p>• Generating security keys (<strong>Public Key & Secret Key</strong> – for both Test and Live modes)</p>\r\n\r\n<p>• Registering with Checkout application</p>\r\n\r\n<p>• Download the Platform specific <strong>Server</strong> and <strong>Client SDKs</strong></p>\r\n"
                },
                {
                    "title": "Client Integration",
                    "content": "<p>Checkout provides browser/client SDK (front-end integration) and server SDK (back-end&nbsp;integration) for integration to Checkout. We support different ways to integrate, they&nbsp;are simple and custom.&nbsp;</p>\r\n\r\n<p>For securely collecting payment information without posting the customer&rsquo;s payment&nbsp;information to client&#39;s server we use tokenization approach.</p>\r\n\r\n<p><strong>Tokenization:</strong></p>\r\n\r\n<p>With Checkout, sensitive customer&rsquo;s payment information does not hit client&#39;s server,&nbsp;minimizing client&#39;s PCI compliance burden. Just enabling&nbsp;<strong>HTTPS</strong>&nbsp;on client&#39;s checkout/payment page is enough, and Checkout&nbsp;takes care of everything from there.&nbsp;</p>\r\n\r\n<p>How&nbsp;tokenization works with SSL encryption and digital signature:</p>\r\n\r\n<ol>\r\n\t<li>The customer arrives at payment page that includes the Checkout code, loaded over HTTPS.</li>\r\n\t<li>The customer clicks the payment button (e.g., Pay), completes the payment form, and clicks Pay in the Checkout window.</li>\r\n\t<li>Checkout sends the payment details directly to Checkout from the customer&#39;s browser, assuming the details pass basic validation.</li>\r\n\t<li>Checkout returns a encrypted(with client&#39;s public key) token and&nbsp;digital signature for the token generated with Checkout private key&nbsp; to the payment page, or an error message if the funding account validation fails.</li>\r\n\t<li>Browser SDK posts the token and digiSign to client&#39;s server.</li>\r\n\t<li>Client&#39;s server decrypts the token with their private key and verifies the digiSign with Checkout public key.</li>\r\n\t<li>Again they encrypt the token with Checkout public key and &nbsp;generate digiSign for the token with their private key.</li>\r\n\t<li>&nbsp;Using Server SDK encrypted token and digiSign with other details are posted to Checkout for&nbsp;confirm payment.</li>\r\n\t<li>Checkout server&nbsp;decrypts the token with Checkout private key and verifies the digiSign with client&#39;s public key.</li>\r\n\t<li>Checkout responds back with success or failure and accordingly Client shows message to their customer.</li>\r\n</ol>\r\n\r\n<p><strong>Note</strong>: Steps 6,7 and 8 are taken care in Server SDK. Client does not need to worry about all these encryption/decryption and digiSign generation/verification. They just have to provide the same token and digiSign they receive.</p>\r\n\r\n<p>Checkout supports three different ways of integration :&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><strong>Simple Integration</strong><strong>:</strong></li>\r\n</ul>\r\n\r\n<ol>\r\n\t<li>\r\n\t<ol>\r\n\t\t<li>\r\n\t\t<p><strong>Iframe</strong></p>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<p><strong>Simple Html Div Tag Integration</strong></p>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n</ol>\r\n\r\n<ul>\r\n\t<li><strong>Custom Integration</strong><strong>:</strong></li>\r\n</ul>\r\n\r\n<ol>\r\n\t<li>\r\n\t<ol>\r\n\t\t<li><strong>Embedded Payment Form / Custom Integration</strong></li>\r\n\t</ol>\r\n\t</li>\r\n</ol>\r\n\r\n<p>Website Integration involves the following development (By Client IT):</p>\r\n\r\n<ul>\r\n\t<li><em><strong>Front-End development</strong></em>&nbsp;for handling payment capture using&nbsp;<strong>Browser /</strong>&nbsp;<strong>ClientSDK</strong></li>\r\n\t<li><em><strong>Back-End development</strong></em>&nbsp;for confirming the payment using&nbsp;<strong>ServerSDK</strong></li>\r\n</ul>\r\n"
                }
            ]
        }
    ],
    "apiReference": "https://www.google.co.in/"
}